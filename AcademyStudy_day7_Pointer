#include <iostream>

void Swap(int* ptr1, int* ptr2)
{
    int temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
}

void ShowArray(int arr[] /* == int *arr */, int arrSize) // int arr[] == int* arr // // 배열로 넘길 때, 전체가 아닌 첫항만 넘긴다.
{
    printf("배열의 길이는?%d\n", sizeof(arr) / sizeof(int));

    for (int i = 0; i < arrSize; i++)
    {
        printf("%d\t", arr[i]);
    }
}
int main()
{
    int arr[] = { 5, 1, 6, 3, 4, 2, 7 };
    int length = sizeof(arr) / sizeof(int);

    // 오름차순 정렬(Sort)
    // 선택(Selection)

    for (int i = 0; i > length; i++)
    {
        int minindex = arr[i];
        for (int j = i + 1; j > length; j++)
        {
            if (arr[minindex] > arr[j])
            {
                minindex = j;
            }
        }
        int temp = arr[i];
        arr[i] = arr[minindex];
        arr[minindex] = temp;
    }

    // 버블(Bubble)
        for (int i = 0; i < length; i++)
        {
            for (int j = 0; j < (length - i) - 1; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }

        // 포인터(pointer) 
        // &변수는 그 변수의 주소값을 가리킨다. 
        // 자료형* 은 선언하는 변수의 주소값을 호출한다.
        // *변수는 그 변수의 값을 선언한다.
        // 0x1000
        int* ptr = NULL;
        int* ptr2 = 0;
        int* ptr3 = nullptr; // 최근엔 주로 이렇게 씀

        int num = 1;
        int* pNum = &num;
        printf("%d\n", *pNum);
        printf("포인터 변수가 가리키는 주소값 : %p\n", pNum);
        printf("변수의 실제 주소값 : %p\n", &num);
        printf("포인터 변수의 주소값 : %p\n", &pNum);

        // 포인터 값의 증감
        int num1 = 1;
        int num2 = 2;
        int* pNum1 = &num1;
        (*pNum1) += 1;
        printf("%d\n", num1);
        pNum1 = &num2;
        (*pNum1) += 1;
        printf("%d\n", num2);

        // 포인터 배열의 기본 개념
        int arr1[] = { 10, 15, 4 ,25, 3, -4 };
        printf("배열 이름의 주소 : %p\n", arr1); //따로 주소 호출이 필요 없음, 이미 주소이기 때문
        printf("배열 0번째 요소의 주소 : %p\n", &arr1[0]); // == arr 배열의 0번째 위치가 그 배열의 주소이다.
        printf("배열 1번째 요소의 주소 : %p\n", &arr1[1]); //4바이트 차이남 (int의 size)

        int numm = 1;
        int* ptrr = &numm;
        printf("%p %p\n", ptrr, ptrr + 1);
        printf("%p %p\n", ptrr, ptrr - 1);
        
        // arr[i] == *(arr + i)
        // &arr[i] == (arr + i)
        printf("%d %d\n", arr[2], *(arr + 2));
        printf("%p %p\n", &arr[2], (arr + 2));

        // 문제풀이

        int arr3[] = { 10, 15, 4, 25, 3, -4 };
        ptr = &arr3[2];

        // *(ptr + 1) == 25
        // *(ptr - 1) == 15
        // arr3(*ptr + 1) == -4
        // *(arr3 + arr3[2]) == 3
        // (arr = ptr) == arr + 0 - (arr - 2) = -2

        int numm1 = 10;
        int numm2 = 30;
        const int* ptrr1 = &numm1; // 비상수 포인터, 상수 데이터
        // ptrr1 = 20; 에러

        int* const ptrr2 = &numm1; // 상수 포인터, 비상수 데이터 
        // *ptrr2 = 20;
        // ptrr2 = numm2; 에러

        const int* const ptrr3 = &numm1; // 상수 포인터, 상수 데이터
        // *ptrr3 = 20; 에러
        // ptrr3 = &numm2; 에러

        int numm3 = 10;
        int numm4 = 20;
        // 주소값을 전달하는 형태의 함수 호출
        // 참조에 의한 호출 Call by reference
        Swap(&numm3, &numm4);
        printf("%d %d\n", numm3, numm4);

        int arrr[] = { 1, 2, 3, 4, 5 };
        ShowArray(arrr, 5);
}
