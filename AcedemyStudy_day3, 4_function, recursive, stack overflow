#include <iostream>

// 함수 
// 출력의형태 함수이름( 입력의 형태, 입력의 이름(변수명) )
int IncreaseNumber(int num) // (int  name)에서 int가 중요하지, name은 우리가 구별용)
{
    // if (num > 0) 중간에 return을 넣을꺼면 조건문을 넣어라
    int result = num + 1;
    return result; //return 반환값, output return은 기본적으로 맨 마지막에 나옴
}

void AddOne(int num)
{
    num += 1;
}

int Add(int num1 = 1, int num2 = 2) //default 값을 넣을 수 있음, 전부 안 넣을 경우, 오른쪽부터 값을 채워야됨
{
    return num1 + num2;
}

// 함수 오버로딩(overloading)
float Add(float num1 , float num2)
{
    return num1 + num2;
}

void Foo();

void Recursive(int n) // stack overflow로 인해서 오류가 발생, 재귀를 사용하면 메모리를 많이 먹으나, 코드 최적하엔 좋음
{                     // 재귀함수는 stack에 값을 계속 저장해서 부담을 준다.
    if (n <= 0) //재귀함수는 종료 조건이 있어야 된다.
        return;

    printf("%d\n", n);


    Recursive(--n);
}

// 피보나치수열
// 무기를 강화하는데 +1, +2, +3강 랜덤하게 강화할 때 n강하는 경우의 수는?
// 계단을 오르는데 1칸, 2칸, n칸 오르는 경우의 수는?
// 항 : 0 1 2 3 4 5 6  7  8  9 10 11  12
// 값 : 0 1 1 2 3 5 8 13 21 34 55 89 144 .... 
//f(n) = f(n - 1) + f(n - 2)

long long FibonacciRecursive(long long n)  
{

    if (n <= 1)
        return n;
  
    return FibonacciRecursive(n - 1) + FibonacciRecursive(n - 2);
}

// 최대공약수(Greast Common Divisor)
// 유클리드 호제법 
// a > b 
// a = bq + r
// GCD(a, b) = GCD(b, r)


int EuclidRecursive(int a, int b)
{
    int r = a % b;
    if (r == 0)
        return b;
    // a < b
    // a % b == a
    return EuclidRecursive(b, r);
}

/* int Euclidean(int a, int b)
{
    while (b != 0)
    {
        int r = a % b;
        a = b;
        b = r;
    }
} */

// 최소공배수(least Common Multiple)
// 20 15
// 40 15
// 60 15
int LCM(int a, int b)
{
    int i = a;
    while (a % b != 0)
    {
        a += i;
        printf("%d\n", a);
    }
    return a;
}

int main()
{
    Add(1, 2);
    Add(1.1f, 2.1f); // 함수명이 같아도 자료형에 따라 컴파일러가 자동으로 인식함
    // 함수 호출
    int num = 1;
    //int result = IncreaseNumber(num1); // 위에 result랑 다른 변수이다 (위는 매게변수 parameter) (아래는 지역 변수 argument) 
    //printf("%d\n", result);
    
    // 기본 : 값에 의한 호출 Call by value 함수에 변수를 넣으면 변수는 바뀌지 않고, 안에 함수 값만 바뀐다.
    // 주소값을 알게 되면 : <-> 참조에 의한 호출 Call by reference 힘수 안에서 바깥에 있는 변수를 바꿀때 사용.
    AddOne(num);
    printf("%d\n", num);

    printf("%d\n", Add());
    // Foo
    // Recursive(3);
    printf("%lld\n", FibonacciRecursive(10));
    printf("%d\n", LCM(5, 13));
    int a = 200 % 2100;
    printf("%d\n", a);
}

void Foo() // 함수가 아래에 있으면 위에서 선언이 안됨.
    {
    printf("Foo\n");
    }


// 고민거리

// 소수(prime) - 약수가-1, 자기자신 ex) 2, 3, 5 ,7, 11
// 에라토스테네스의 체
// 1 ~ 100
// 1 ~ 기초수
// 2 빼고 2의 배수 (짝수)
// 3 빼고 3의 배수
// 7 빼고 7의 배수
// 루트 n 배수까지만 찾아서 예외처리하면 n안의 소수의 갯수를 찾을 수 있다.




