#include <iostream>

int num = 1; // 전역변수는 사라지지 않고 어디든 접근 가능하다. 단, 많아지면 구조가 복잡해져 최소한으로 써라.


void Foo()
{
    static int num = 0; // static은 지역변수와 전역변수에 특징을 가진다. 접근영역은 함수안에서만, 변수는 전역변수가 된다.
    num++;
    printf("%d\n", num);
}

int FibonacciIDP(int n)
{
    int f[11];

    f[0] = 0;
    f[1] = f[2] = 1;

    for (int i = 3; i <= n; i++)
    {
        f[i] = f[i - 1] + f[i - 2];
    }

    return f[n];
}

int main()
{
    // num = 2; // 지역변수랑 전역변수가 같은 이름이면 잡히는 지역변수가 우선 선언된다. (가급적 서로 다른 이름으로)
    // printf("%d\n", num);
    for (int i = 0; i < 5; i++)
    {
        Foo();
    }

    // int score1, score2, score3, score4, score5, 
    // score6, score7, score8, score9, score10;

    // 배열(array) // 개별이 int, 전체는 배열로 인식, 길이는 늘릴수 없다. 크기를 고정되 있을 때 유용
    int scores[4];
    int index = 0;
    // scores[index] = 100;
    scores[0] = 100;
    // 배열의 인덱스 범위는 0 ~ (배열의 크기 -1)
    // Index Out of Range 발생하지 않도록 조심
    scores[1] = 100;
    scores[2] = 100;
    // index = 4; 이런 오류 주의! 
    scores[3] = 100;

    for (int i = 0; i < 4; i++)
    {
        printf("%d\n", scores[i]);
    }

    int arr1[4] = { 10, 20, 30, 40 };
    int arr2[ ] = { 10, 20, 30, 40 };

    printf("배열의 바이트 단위 크기 : %d\n", sizeof(arr1));
    printf("배열의 길이 : %d\n", sizeof(arr1) / sizeof(int));
    printf("배열의 길이 : %d\n", sizeof(arr1) / sizeof(arr1[0]));
    printf("%d\n", FibonacciIDP(10));
    
}

